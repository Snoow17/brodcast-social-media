@model BrodcastSocialMedia.ViewModels.ExploreViewModel

@{
    ViewData["Title"] = "Explore";
}

<div class="container mt-5">
    <h2 class="text-white mb-4">🎧 Explore Broadcasters</h2>

    <div class="row row-cols-1 row-cols-md-2 g-4">
        @foreach (var user in Model.Users)
        {
            <div class="col">
                <div class="card bg-dark bg-opacity-50 glass-card text-white shadow-lg border border-light rounded-4"
                     role="button" onclick="loadUserModal('@user.Id', true)">
                    <div class="card-body d-flex align-items-center">
                        <img src="@user.ProfileImageUrl"
                             class="rounded-circle me-3 border border-secondary"
                             width="64" height="64"
                             alt="@user.Name's profile image"
                             onerror="this.onerror=null; this.src='/uploads/default-profile.png';" />
                        <div>
                            <h5 class="card-title mb-1">@user.Name</h5>
                            <small class="text-light">Broadcasts: @user.BroadcastCount</small>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark bg-opacity-75 text-white shadow-lg rounded-4 border border-light">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="userModalLabel">User Info</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="userModalBody">
                <p>Loading...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function loadUserModal(userId, isExplorePage = false) {
            const modal = new bootstrap.Modal(document.getElementById("userModal"));
            const modalBody = document.getElementById("userModalBody");
            modalBody.innerHTML = "<p>Loading...</p>";
            modal.show();

            try {
                const res = await fetch(`/Users/GetUserModal?id=${userId}`);
                if (!res.ok) throw new Error("Failed to load user modal");

                const html = await res.text();
                modalBody.innerHTML = html;

                if (isExplorePage) {
                    // Create a "Go to Profile" button
                    const profileBtn = document.createElement("a");
                    profileBtn.href = `/Users/ShowUser?id=${userId}`;
                    profileBtn.className = "btn btn-primary w-100 mt-3";
                    profileBtn.innerText = "Go to Profile";
                    modalBody.appendChild(profileBtn);
                }

            } catch (err) {
                console.error(err);
                modalBody.innerHTML = '<p class="text-danger">Failed to load user details.</p>';
            }
        }

        async function toggleListen(userId, button) {
            const isListening = button.dataset.listening === "true";

            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (!token) {
                console.error("CSRF token not found");
                alert("Missing CSRF token");
                return;
            }

            try {
                const res = await fetch("/Users/ToggleListen", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": token
                    },
                    body: JSON.stringify({ userId })
                });

                if (!res.ok) {
                    const errMsg = await res.text();
                    throw new Error(errMsg);
                }

                const result = await res.json();
                button.innerText = result.isListening ? "🔕 Unlisten" : "🎧 Listen";
                button.classList.toggle("btn-danger", result.isListening);
                button.classList.toggle("btn-outline-light", !result.isListening);
                button.dataset.listening = result.isListening;
            } catch (err) {
                console.error("Failed to update:", err);
                alert("Failed to update listening status.");
            }
        }
    </script>

    <form style="display: none;">
        @Html.AntiForgeryToken()
    </form>
}
