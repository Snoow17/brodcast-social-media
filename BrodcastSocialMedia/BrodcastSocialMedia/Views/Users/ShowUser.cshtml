@using Microsoft.AspNetCore.Identity
@model UsersShowUserViewModel
@inject UserManager<ApplicationUser> UserManager

@{
    var currentUser = await UserManager.GetUserAsync(User);
    var profileUser = Model?.User;
    ViewData["Title"] = profileUser?.Name ?? "User Not Found";
}

<div>
    @if (profileUser == null)
    {
        <h1>User not found</h1>
    }
    else
    {
        <h1>Broadcasts from @profileUser.Name</h1>

        @if (currentUser?.Id != profileUser.Id)
        {
            <form action="/Users/Listen" method="post">
                <input type="hidden" name="UserId" value="@profileUser.Id" />
                <input type="submit" value="Listen to" />
            </form>

            <form asp-controller="Users" asp-action="UnlistenToUser" method="post" onsubmit="return confirm('Are you sure you want to unlisten this user?');">
                <input type="hidden" name="UserId" value="@profileUser.Id" />
                <button type="submit">Unlisten</button>
            </form>
        }

        @if (Model.Broadcasts != null && Model.Broadcasts.Any())
        {
            foreach (var broadcast in Model.Broadcasts)
            {
                <p>
                    <b>@broadcast.Published.ToShortDateString() @broadcast.Published.ToShortTimeString()</b>:
                    @broadcast.Message
                </p>
            }
        }
        else
        {
            <p>This user hasn't posted any broadcasts yet.</p>
        }
    }
</div>

<script>
    function showUserModal(userId) {
        $.ajax({
            url: '/Users/GetUserModal?id=' + encodeURIComponent(userId),
            type: 'GET',
            success: function (data) {
                $('#userModalContent').html(data);
                var modal = new bootstrap.Modal(document.getElementById('userModal'));
                modal.show();
            },
            error: function () {
                alert('Failed to load user data.');
            }
        });
    }

    function toggleListen(userId, btn) {
        $.ajax({
            url: '/Users/ToggleListen',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ userId: userId }),
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (data) {
                if (data.isListening) {
                    btn.classList.remove('btn-outline-light');
                    btn.classList.add('btn-danger');
                    btn.innerHTML = '🔕 Unlisten';
                    btn.setAttribute('data-listening', 'true');
                } else {
                    btn.classList.remove('btn-danger');
                    btn.classList.add('btn-outline-light');
                    btn.innerHTML = '🎧 Listen';
                    btn.setAttribute('data-listening', 'false');
                }
            },
            error: function () {
                alert('Error toggling listen status.');
            }
        });
    }
</script>
