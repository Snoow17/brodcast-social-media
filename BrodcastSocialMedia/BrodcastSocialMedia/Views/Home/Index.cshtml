@model HomeIndexViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="container mt-5">

    <div class="text-center mb-4">
        <h1 class="display-4">Welcome</h1>
    </div>

    <h2 class="text-light">New Broadcast</h2>

    <div class="card mb-4 new-broadcast-card">
        <div class="card-body">
            <form asp-action="Broadcast" method="post" enctype="multipart/form-data">
                <div class="mb-3">
                    <textarea asp-for="Message" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Message"></span>
                </div>
                <div class="mb-3">
                    <div class="custom-file-upload">
                        <label for="ImageUpload" class="upload-label">
                            <i class="fa fa-upload me-2"></i> Choose Image
                        </label>
                        <input type="file" asp-for="Image" id="ImageUpload" class="form-control-file" />
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Broadcast</button>
            </form>
        </div>
    </div>

    @if (ViewData["Error"] != null)
    {
        <div class="alert alert-danger" role="alert">
            @ViewData["Error"]
        </div>
    }

    <h2 class="mt-5">Broadcasts</h2>

    @foreach (var broadcast in Model.Broadcasts)
    {
        <div class="card mb-4 d-flex flex-column" style="min-height: 250px;">
            <div class="card-body d-flex flex-column justify-content-between">

                <div>
                    <h5 class="card-title">
                        @broadcast.UserName
                        <small class="text-muted">
                            (@broadcast.Published.ToShortDateString() @broadcast.Published.ToShortTimeString())
                        </small>
                    </h5>

                    <p class="card-text">@broadcast.Message</p>

                    @if (!string.IsNullOrEmpty(broadcast.ImageUrl))
                    {
                        <img src="@broadcast.ImageUrl" alt="Broadcast image" class="img-fluid rounded mb-3" />
                    }
                </div>

                <div class="like-actions">
                    <!-- Like (heart icon) -->
                    <button class="btn btn-link p-0 like-button"
                            data-broadcast-id="@broadcast.Id"
                            onclick="toggleLike(this)">
                        <i class="fa @(broadcast.IsLikedByCurrentUser ? "fa-heart text-primary" : "fa-heart-o") fa-lg"></i>
                    </button>

                    <!-- Like count (opens modal) -->
                    <button class="btn btn-link p-0 text-decoration-none text-dark"
                            onclick="showLikersModal(@broadcast.Id)">
                        <span class="like-count">@broadcast.LikeCount</span> liked
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Likers Modal -->
    <div id="likersModal" class="modal show" tabindex="-1" style="display:none;" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Liked by</h5>
                    <button type="button" class="btn-close" onclick="closeLikersModal()" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul id="likersList" class="list-unstyled"></ul>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script>
        async function toggleLike(button) {
            const broadcastId = button.getAttribute("data-broadcast-id");

            const response = await fetch("/Home/ToggleLike", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(broadcastId)
            });

            if (!response.ok) return;

            const result = await response.json();

            // Update like count
            const broadcastCard = button.closest(".card-body");
            const likeCountSpan = broadcastCard.querySelector(".like-count");
            likeCountSpan.innerText = result.likeCount;

            const icon = button.querySelector("i");
            if (!icon) return;

            icon.classList.remove("fa-heart", "fa-heart-o", "text-primary");
            icon.classList.add(result.isLiked ? "fa-heart" : "fa-heart-o");
            if (result.isLiked) {
                icon.classList.add("text-primary");
            }

            icon.classList.add("heart-animate");
            setTimeout(() => icon.classList.remove("heart-animate"), 300);
        }

        async function showLikersModal(broadcastId) {
            const response = await fetch(`/Home/GetLikers?broadcastId=${broadcastId}`);
            const users = await response.json();

            const list = document.getElementById("likersList");
            list.innerHTML = "";
            users.forEach(user => {
                const li = document.createElement("li");
                li.innerText = user;
                list.appendChild(li);
            });

            document.getElementById("likersModal").style.display = "block";
        }

        function closeLikersModal() {
            document.getElementById("likersModal").style.display = "none";
        }

            document.getElementById("ImageUpload").addEventListener("change", function () {
            const fileName = this.files[0]?.name || "Choose Image";
            document.querySelector("label[for='ImageUpload']").innerText = fileName;
        });
    </script>

    <script>
        <partial name="_ValidationScriptsPartial" />
    </script>
}
