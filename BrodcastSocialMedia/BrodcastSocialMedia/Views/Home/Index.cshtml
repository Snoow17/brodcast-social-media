@model HomeIndexViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="container mt-5">

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-warning d-flex justify-content-between align-items-center" role="alert">
            <div>@TempData["ErrorMessage"]</div>
            <div>
                <a class="btn btn-sm btn-primary me-2" asp-area="Identity" asp-page="/Account/Register" asp-route-returnUrl="@Url.Action("Index", "Home")">Register</a>
                <a class="btn btn-sm btn-secondary" asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Url.Action("Index", "Home")">Login</a>
            </div>
        </div>
    }


    <h2 class="text-dark">New Broadcast</h2>

    <div class="card mb-4 new-broadcast-card">
        <div class="card-body">
            <form asp-action="Broadcast" method="post" enctype="multipart/form-data">
                <div class="mb-3">
                    <textarea asp-for="Message"
                              class="form-control @(ViewData.ModelState["Message"]?.Errors.Count > 0 ? "is-invalid" : "")"
                              rows="3"></textarea>
                    <span asp-validation-for="Message"></span>
                </div>
                <div class="mb-3">
                    <div class="custom-file-upload">
                        <label for="ImageUpload" class="upload-label">
                            <i class="fa fa-upload me-2"></i> Choose Image
                        </label>
                        <input type="file" asp-for="Image" id="ImageUpload" class="form-control-file" />
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Broadcast</button>
            </form>
        </div>
    </div>

    <h2 class="text-dark">Broadcasts</h2>

    @foreach (var broadcast in Model.Broadcasts)
    {
        <div class="card mb-4 d-flex flex-column" style="min-height: 250px; position: relative;">
            <div class="card-body d-flex flex-column justify-content-between position-relative">

                
                @if (broadcast.IsOwnedByCurrentUser)
                {
                    <form method="post"
                          asp-action="DeleteBroadcast"
                          asp-route-id="@broadcast.Id"
                          onsubmit="return confirm('Are you sure you want to delete this broadcast?');"
                          class="position-absolute top-0 end-0 m-2">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                            <i class="fa fa-trash"></i>
                        </button>
                    </form>
                }

                <div>
                    <div class="d-flex align-items-center mb-2">
                        <img src="@(string.IsNullOrEmpty(broadcast.ProfileImageUrl) ? "/uploads/default-profile.png" : broadcast.ProfileImageUrl)"
                             alt="Profile Picture"
                             class="rounded-circle me-2"
                             style="width: 40px; height: 40px;" />

                        <h5 class="card-title">
                            @broadcast.UserName
                            <small class="text-muted">
                                (@broadcast.Published.ToShortDateString() @broadcast.Published.ToShortTimeString())
                            </small>
                        </h5>
                    </div>

                    <p class="card-text">@broadcast.Message</p>

                    @if (!string.IsNullOrEmpty(broadcast.ImageUrl))
                    {
                        <img src="@broadcast.ImageUrl" alt="Broadcast image" class="img-fluid rounded mb-3" />
                    }
                </div>

                <div class="like-actions">
                    <button class="btn btn-link p-0 like-button"
                            data-broadcast-id="@broadcast.Id"
                            onclick="toggleLike(this)">
                        <i class="fa @(broadcast.IsLikedByCurrentUser ? "fa-heart text-primary" : "fa-heart-o") fa-lg"></i>
                    </button>

                    <button class="btn btn-link p-0 text-decoration-none text-dark"
                            onclick="showLikersModal(@broadcast.Id)">
                        <span class="like-count">@broadcast.LikeCount</span> liked
                    </button>
                </div>
            </div>
        </div>
    }



</div>

@section Styles {
    <link rel="stylesheet" href="~/css/glass.css" />
    <style>
        .is-invalid {
            border-color: #dc3545 !important;
        }

        .text-danger {
            color: #dc3545 !important;
        }
    </style>
}

@section Scripts {
    <script>
        async function toggleLike(button) {
            const broadcastId = button.getAttribute("data-broadcast-id");

            const response = await fetch("/Home/ToggleLike", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(broadcastId)
            });

            if (!response.ok) return;

            const result = await response.json();

            const broadcastCard = button.closest(".card-body");
            const likeCountSpan = broadcastCard.querySelector(".like-count");
            likeCountSpan.innerText = result.likeCount;

            const icon = button.querySelector("i");
            if (!icon) return;

            icon.classList.remove("fa-heart", "fa-heart-o", "text-primary");
            icon.classList.add(result.isLiked ? "fa-heart" : "fa-heart-o");
            if (result.isLiked) {
                icon.classList.add("text-primary");
            }

            icon.classList.add("heart-animate");
            setTimeout(() => icon.classList.remove("heart-animate"), 300);
        }

                 async function showLikersModal(broadcastId) {
            const response = await fetch(`/Home/Getlikers?broadcastId=${broadcastId}`);
            const users = await response.json();

            const list = document.getElementById("likersList");
            list.innerHTML = "";

            users.forEach(user => {
                const li = document.createElement("li");
                li.className = "d-flex align-items-center mb-2";

                const img = document.createElement("img");
                img.src = user.profileImageUrl || "/uploads/default-profile.png";
                img.alt = "Profile";
                img.className = "rounded-circle me-2 border border-secondary";
                img.style.width = "40px";
                img.style.height = "40px";

                const span = document.createElement("span");
                span.innerText = user.name;

                li.appendChild(img);
                li.appendChild(span);
                list.appendChild(li);
            });

            const modal = new bootstrap.Modal(document.getElementById('likersModal'));
            modal.show();
        }

        document.getElementById("ImageUpload").addEventListener("change", function () {
            const fileName = this.files[0]?.name || "Choose Image";
            document.querySelector("label[for='ImageUpload']").innerText = fileName;
        });
    </script>

    <script>
        <partial name="_ValidationScriptsPartial" />
    </script>
}
